from __future__ import annotations

import os
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.client.bot import Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

from app.db import SessionLocal
from app.services.payment_service import PaymentService
from app.services.access_service import AccessService
from app.pay.robokassa import build_payment_link
from app.config import settings

CONTENT_CHANNEL_ID = int(os.getenv("CONTENT_CHANNEL_ID"))
CONTENT_CHAT_ID = int(os.getenv("CONTENT_CHAT_ID"))

# –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –ø–ª–∞–Ω–∞–º (–¥–Ω–∏)
PLAN_ACCESS_DAYS = {
    "m1": 30,
    "m3": 90,
    "m6": 180,
    "trial3_10": 3,
}

router = Router()


# ---------- —É—Ç–∏–ª–∏—Ç—ã —Ü–µ–Ω ----------
def _price_for_plan(plan: str) -> int:
    if plan == "trial3_10":
        return int(getattr(settings, "TRIAL_PRICE", 10))
    price_map: dict[str, int] = {}
    for pair in str(getattr(settings, "PLAN_PRICES_RUB", "")).split(","):
        pair = pair.strip()
        if not pair:
            continue
        try:
            k, v = pair.split(":")
            price_map[k.strip()] = int(v.strip())
        except ValueError:
            continue
    return price_map.get(plan, price_map.get("m1", 990))

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º: age_verify –æ–∂–∏–¥–∞–µ—Ç –ú–ê–ü–£ —Ü–µ–Ω
PRICE_RUB = {
    "m1": _price_for_plan("m1"),
    "m3": _price_for_plan("m3"),
    "m6": _price_for_plan("m6"),
    "trial3_10": _price_for_plan("trial3_10"),
}

# –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–æ–¥–∞
def price_for_plan(plan: str) -> int:
    return _price_for_plan(plan)



# ---------- –ø–æ–¥–ø–∏—Å–∏ –∏ —Ç–µ–∫—Å—Ç—ã ----------
def _label(plan: str) -> str:
    mapping = {
        "m1": "1 –º–µ—Å—è—Ü ‚Äî ",
        "m3": "3 –º–µ—Å—è—Ü–∞ ‚Äî ",
        "m6": "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî ",
        "trial3_10": "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî 3 –¥–Ω—è ‚Äî ",
    }
    return f"{mapping[plan]}{_fmt_rub(_price_for_plan(plan))}"


def _tariffs_text() -> str:
    return (
        "üßæ <b>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
        "üëâ –¢–∞—Ä–∏—Ñ—ã:\n"
        f"‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî {_fmt_rub(_price_for_plan('m1'))}\n"
        f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî {_fmt_rub(_price_for_plan('m3'))}\n"
        f"‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî {_fmt_rub(_price_for_plan('m6'))}\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è (–∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç).\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ—Ç 18 –ª–µ—Ç ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 25%.\n"
    )


def tariffs_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=_label("m1"), callback_data="tariff:m1")],
        [InlineKeyboardButton(text=_label("m3"), callback_data="tariff:m3")],
        [InlineKeyboardButton(text=_label("m6"), callback_data="tariff:m6")],
        [InlineKeyboardButton(text="–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç", callback_data="u18_start")],
    ])


def back_to_tariffs_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")]
    ])


def pay_kb(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")],
    ])


# ---------- –æ–±—â–∏–π –≤—Ö–æ–¥ –≤ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤ ----------
@router.callback_query(F.data == "open_tariffs")
async def open_tariffs(call: CallbackQuery):
    await call.message.answer(_tariffs_text(), reply_markup=tariffs_kb())
    await call.answer()


@router.message(F.text.lower().contains("–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
async def open_tariffs_from_text(msg: Message):
    await msg.answer(_tariffs_text(), reply_markup=tariffs_kb())


# ---------- —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç ----------
CONSENT_TEXT = (
    "‚úÖ –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
    "–∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã."
)


def _period_days(plan: str) -> int:
    return {"m1": 30, "m3": 90, "m6": 180}[plan]


def consent_text(plan: str) -> str:
    price = _price_for_plan(plan)
    return (
        f"üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ { {'m1':'1 –º–µ—Å—è—Ü','m3':'3 –º–µ—Å—è—Ü–∞','m6':'6 –º–µ—Å—è—Ü–µ–≤'}[plan] }</b>\n"
        f"–°—É–º–º–∞: <b>{_fmt_rub(price)}</b>\n"
        f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏–π: —Ä–∞–∑ –≤ {_period_days(plan)} –¥–Ω–µ–π.\n\n"
        f"{CONSENT_TEXT}\n"
        f"–° —É—Å–ª–æ–≤–∏—è–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Ç—É—Ç: "
        f"<a href='{getattr(settings,'OFFERTA_URL','https://example.com/offer')}'>–û—Ñ–µ—Ä—Ç–∞</a> –∏ "
        f"<a href='{getattr(settings,'PRIVACY_URL','https://example.com/privacy')}'>–ü–æ–ª–∏—Ç–∏–∫–∞</a>."
    )



def consent_kb(plan: str, agreed: bool) -> InlineKeyboardMarkup:
    box = "‚òë" if agreed else "‚òê"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{box} –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"consent:toggle:{plan}")],
        [InlineKeyboardButton(
            text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ" if agreed else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            callback_data=f"consent:confirm:{plan}"
        )],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")],
    ])


# ---------- –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ ----------
def card_text(plan: str) -> str:
    base = {
        "m1": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü</b>",
        "m3": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞</b>",
        "m6": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b>",
        "trial3_10": "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> ‚Äî 3 –¥–Ω—è",
    }[plan]
    policy = (
        "\n\n–ù–∞–∂–∏–º–∞—è ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —Å–æ–≥–ª–∞—Å–∏–µ —Å "
        f"<a href='{getattr(settings,'PRIVACY_URL','https://example.com/privacy')}'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> "
        f"–∏ <a href='{getattr(settings,'OFFERTA_URL','https://example.com/offer')}'>–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π</a>."
    )
    return f"{base}\n–¶–µ–Ω–∞: {_fmt_rub(_price_for_plan(plan))}{policy}"


@router.callback_query(F.data.startswith("tariff:"))
async def show_tariff_or_info(call: CallbackQuery):
    plan = call.data.split(":", 1)[1]

    # –∏–Ω—Ñ–æ –ø–æ u18
    if plan == "u18_info":
        await call.message.answer(
            "üîñ –°–∫–∏–¥–∫–∞ 25% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–ª–∞–¥—à–µ 18 –ª–µ—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
            reply_markup=back_to_tariffs_kb(),
        )
        await call.answer()
        return

    # –æ–±—ã—á–Ω—ã–µ –ø–ª–∞–Ω—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω —Å–æ–≥–ª–∞—Å–∏—è (–¥–∞–ª–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç age_verify)
    if plan in ("m1", "m3", "m6"):
        await call.message.answer(consent_text(plan), reply_markup=consent_kb(plan, False))
        await call.answer()
        return

    # –ø—Ä–æ—á–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, trial) ‚Äî —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
    async with SessionLocal() as session:
        svc = PaymentService(session)

        # Robokassa —Ç—Ä–µ–±—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π InvId; –¥–µ–ª–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 32-–±–∏—Ç–Ω—ã–π
        from uuid import uuid4
        inv_id = int(uuid4().hex[:8], 16)

        # —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å —Å provider_invoice_id —Ä–∞–≤–Ω—ã–º InvId (—á—Ç–æ–±—ã –≤–µ–±—Ö—É–∫/–ø–æ–∏—Å–∫ —Å–æ—à–ª–∏—Å—å)
        payment, invoice_id = await svc.create_invoice(
            tg_user_id=call.from_user.id,
            plan=plan,
            provider_invoice_id=str(inv_id),
        )

        pay_url = build_payment_link(
            amount_rub=float(_price_for_plan(plan)),
            inv_id=inv_id,
            user_id=call.from_user.id,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan}",
        )

    await call.message.answer(card_text(plan), reply_markup=pay_kb(pay_url))
    await call.answer()


# ---------- –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ----------
@router.callback_query(F.data == "check_payment")
async def check_payment(call: CallbackQuery, bot: Bot):
    async with SessionLocal() as session:
        pay = PaymentService(session)

        # 1) –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if not await pay.user_has_active_subscription(call.from_user.id):
            await call.message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            await call.answer()
            return

        # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ
        access = AccessService(session, bot)
        in_channel = await access.is_member(CONTENT_CHANNEL_ID, call.from_user.id)
        in_group = await access.is_member(CONTENT_CHAT_ID, call.from_user.id)

        if in_channel and in_group:
            await call.message.answer("‚úÖ –î–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω: —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å –∏ –≤ –∫–∞–Ω–∞–ª–µ, –∏ –≤ —á–∞—Ç–µ.")
            await call.answer()
            return

        # 3) —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –ø–ª–∞–Ω—É
        sub = await pay.get_active_subscription(call.from_user.id)
        plan = getattr(sub, "plan", "m1")
        access_days = PLAN_ACCESS_DAYS.get(plan, 30)

        # 4) –ø—Ä–æ–±—É–µ–º —Ä–µ—é–∑–Ω—É—Ç—å –∂–∏–≤—ã–µ —Å—Å—ã–ª–∫–∏, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–µ –∏ –ø–∏—à–µ–º –≤ –ë–î
        links: list[str] = []
        reuse_window_min = 5

        if not in_channel:
            old_ch = await access.get_unexpired_link(call.from_user.id, CONTENT_CHANNEL_ID, reuse_window_min)
            if old_ch:
                links.append(f"–ö–∞–Ω–∞–ª: {old_ch}")
            else:
                ch_new = await access.create_one_time_link(
                    tg_user_id=call.from_user.id,
                    chat_id=CONTENT_CHANNEL_ID,
                    ttl_minutes=60,
                    access_days=access_days,
                )
                links.append(f"–ö–∞–Ω–∞–ª: {ch_new}")

        if not in_group:
            old_gr = await access.get_unexpired_link(call.from_user.id, CONTENT_CHAT_ID, reuse_window_min)
            if old_gr:
                links.append(f"–ß–∞—Ç: {old_gr}")
            else:
                gr_new = await access.create_one_time_link(
                    tg_user_id=call.from_user.id,
                    chat_id=CONTENT_CHAT_ID,
                    ttl_minutes=60,
                    access_days=access_days,
                )
                links.append(f"–ß–∞—Ç: {gr_new}")

        # 5) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if links:
            await call.message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
                + "\n".join(links)
                + "\n\n–°—Å—ã–ª–∫–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 60 –º–∏–Ω—É—Ç."
            )
        else:
            await call.message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω.")

    await call.answer()
