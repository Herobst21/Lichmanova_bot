from __future__ import annotations

import logging
import secrets
from typing import Optional, Dict

from aiogram import Router, F
from aiogram.types import (
    CallbackQuery, Message,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text as sql_text

from app.config import settings
from app.db import get_session
from app.services.payment_service import PaymentService
from app.pay.robokassa import build_payment_link
from app.handlers.pay import PRICE_RUB, pay_kb  # reuse —Ü–µ–Ω –∏ –∫–Ω–æ–ø–æ–∫

router = Router()
logger = logging.getLogger(__name__)

# ---------- CONFIG ----------
def _admin_chat_id() -> Optional[int]:
    if getattr(settings, "AGE_VERIFY_ADMIN_ID", None):
        return settings.AGE_VERIFY_ADMIN_ID
    if getattr(settings, "OWNER_ID", None):
        return settings.OWNER_ID
    admins = getattr(settings, "ADMINS", []) or []
    return admins[0] if admins else None

SUPPORT_URL: str = getattr(settings, "SUPPORT_URL", "https://t.me/your_support_here")

# in-memory –¥–ª—è MVP (–Ω–∞ –ø—Ä–æ–¥–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
VERIFIED_USERS: set[int] = set()
PENDING: Dict[str, Dict] = {}  # token -> {"user_id": int, "file_id": str}

BASE_TO_U18 = {"m1": "m1_u18", "m3": "m3_u18", "m6": "m6_u18"}

PRICE_RUB_U18: Dict[str, int] = {
    "m1_u18": int(round(PRICE_RUB["m1"] * 0.75)),
    "m3_u18": int(round(PRICE_RUB["m3"] * 0.75)),
    "m6_u18": int(round(PRICE_RUB["m6"] * 0.75)),
}
LABEL_U18: Dict[str, str] = {
    "m1_u18": f"1 –º–µ—Å—è—Ü ‚àí25% ‚Äî {PRICE_RUB_U18['m1_u18']} ‚ÇΩ",
    "m3_u18": f"3 –º–µ—Å—è—Ü–∞ ‚àí25% ‚Äî {PRICE_RUB_U18['m3_u18']} ‚ÇΩ",
    "m6_u18": f"6 –º–µ—Å—è—Ü–µ–≤ ‚àí25% ‚Äî {PRICE_RUB_U18['m6_u18']} ‚ÇΩ",
}

POLICY_HTML = (
    "\n\n–ù–∞–∂–∏–º–∞—è ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    f"<a href='{getattr(settings,'PRIVACY_URL','https://example.com/privacy')}'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> "
    f"–∏ <a href='{getattr(settings,'OFFERTA_URL','https://example.com/offer')}'>–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π</a>."
)

CONSENT_TEXT = (
    "‚úÖ –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
    "–∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã."
)

# ---------- FSM ----------
class AgeCheck(StatesGroup):
    waiting_photo = State()

# ---------- UI ----------
def kb_u18_intro() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_URL)],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")],
    ])

def kb_admin_decision(token: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"age:approve:{token}"),
            InlineKeyboardButton(text="‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"age:reject:{token}"),
        ]
    ])

def kb_u18_discount_plans() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LABEL_U18["m1_u18"], callback_data="u18:tariff:m1_u18")],
        [InlineKeyboardButton(text=LABEL_U18["m3_u18"], callback_data="u18:tariff:m3_u18")],
        [InlineKeyboardButton(text=LABEL_U18["m6_u18"], callback_data="u18:tariff:m6_u18")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")],
    ])

def consent_kb(plan_code: str, agreed: bool) -> InlineKeyboardMarkup:
    box = "‚òë" if agreed else "‚òê"
    rows = [
        [InlineKeyboardButton(text=f"{box} –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"consent:toggle:{plan_code}")],
        [InlineKeyboardButton(
            text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ" if agreed else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            callback_data=f"consent:confirm:{plan_code}"
        )],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- HELPERS ----------
def _user_mention(user_id: int, full_name: str) -> str:
    return f"<a href='tg://user?id={user_id}'>{full_name}</a>"

def card_text_u18(plan_code: str) -> str:
    title = {
        "m1_u18": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü</b> ‚Äî —Å–∫–∏–¥–∫–∞ 25%",
        "m3_u18": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞</b> ‚Äî —Å–∫–∏–¥–∫–∞ 25%",
        "m6_u18": "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤</b> ‚Äî —Å–∫–∏–¥–∫–∞ 25%",
    }[plan_code]
    price = PRICE_RUB_U18[plan_code]
    return f"{title}\n–¶–µ–Ω–∞: {price} ‚ÇΩ{POLICY_HTML}"

def plan_period_days(plan_code: str) -> int:
    base = plan_code.replace("_u18", "")
    return {"m1": 30, "m3": 90, "m6": 180}[base]

def plan_amount(plan_code: str) -> int:
    return PRICE_RUB_U18[plan_code] if plan_code.endswith("_u18") else PRICE_RUB[plan_code]

async def save_consent(session: AsyncSession, *, user_id: int, plan: str, price_rub: int, period_days: int) -> None:
    # –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π: —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await session.execute(sql_text("""
    CREATE TABLE IF NOT EXISTS consent_logs (
        id BIGSERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        plan VARCHAR(32) NOT NULL,
        price_rub INTEGER NOT NULL,
        period_days INTEGER NOT NULL,
        consent_text TEXT NOT NULL,
        offer_url VARCHAR(255) NOT NULL,
        privacy_url VARCHAR(255) NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    """))
    await session.execute(sql_text("""
        INSERT INTO consent_logs (user_id, plan, price_rub, period_days, consent_text, offer_url, privacy_url)
        VALUES (:user_id, :plan, :price_rub, :period_days, :consent_text, :offer_url, :privacy_url)
    """), {
        "user_id": user_id,
        "plan": plan,
        "price_rub": price_rub,
        "period_days": period_days,
        "consent_text": CONSENT_TEXT,
        "offer_url": getattr(settings, "OFFERTA_URL", "https://example.com/offer"),
        "privacy_url": getattr(settings, "PRIVACY_URL", "https://example.com/privacy"),
    })
    await session.commit()

# ---------- U18 ENTRY ----------
@router.callback_query(F.data == "u18_start")
async def u18_start(call: CallbackQuery, state: FSMContext):
    text = (
        "–ù—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞.\n\n"
        "–ü—Ä–∏—à–ª–∏ <b>—Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞</b> (–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä). "
        "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã <b>–§–ò–û</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.\n\n"
        "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª. –ò–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª."
    )
    await state.set_state(AgeCheck.waiting_photo)
    try:
        await call.message.edit_text(text, reply_markup=kb_u18_intro())
    except Exception:
        await call.message.answer(text, reply_markup=kb_u18_intro())
    await call.answer()

# ---------- –ü–†–ò–Å–ú –ü–ê–°–ü–û–†–¢–ê ----------
@router.message(AgeCheck.waiting_photo, F.photo)
async def u18_got_passport(msg: Message, state: FSMContext):
    admin_id = _admin_chat_id()
    if not admin_id:
        await msg.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    file_id = msg.photo[-1].file_id
    user = msg.from_user
    token = secrets.token_urlsafe(16)
    PENDING[token] = {"user_id": user.id, "file_id": file_id}

    caption = (
        "<b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {_user_mention(user.id, user.full_name)}\n"
        f"Username: @{user.username or '‚Äî'}\n"
        f"User ID: <code>{user.id}</code>\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å –ø–∞—Å–ø–æ—Ä—Ç –∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    try:
        await msg.bot.send_photo(
            chat_id=admin_id,
            photo=file_id,
            caption=caption,
            reply_markup=kb_admin_decision(token),
            parse_mode="HTML",
        )
    except Exception as e:
        logger.exception("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: %s", e)
        await msg.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    await state.clear()
    await msg.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ–¥–æ–ª–≥–æ.")

@router.message(AgeCheck.waiting_photo)
async def u18_need_photo(msg: Message, state: FSMContext):
    await msg.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –ø–∞—Å–ø–æ—Ä—Ç–∞.", parse_mode="HTML")

# ---------- –†–ï–®–ï–ù–ò–ï –ê–î–ú–ò–ù–ê ----------
@router.callback_query(F.data.startswith("age:approve:"))
async def age_approve(call: CallbackQuery):
    token = call.data.split(":", 2)[-1]
    info = PENDING.pop(token, None)
    if not info:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    user_id = info["user_id"]
    VERIFIED_USERS.add(user_id)

    try:
        await call.bot.send_message(
            chat_id=user_id,
            text=(
                "–í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–∞ <b>—Å–∫–∏–¥–∫–∞ ‚àí25%</b> –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.\n"
                "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:"
            ),
            parse_mode="HTML",
            reply_markup=kb_u18_discount_plans(),
        )
    except Exception as e:
        logger.exception("–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)

    try:
        await call.message.edit_caption(
            caption=(call.message.caption or "") + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ.",
            reply_markup=None,
        )
    except Exception:
        pass

    await call.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

@router.callback_query(F.data.startswith("age:reject:"))
async def age_reject(call: CallbackQuery):
    token = call.data.split(":", 2)[-1]
    info = PENDING.pop(token, None)
    if not info:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    user_id = info["user_id"]
    try:
        await call.bot.send_message(
            chat_id=user_id,
            text="–£–≤—ã, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –∫ —Ç–∞—Ä–∏—Ñ–∞–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open_tariffs")]
            ])
        )
    except Exception as e:
        logger.exception("–ù–µ —Å–º–æ–≥ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)

    try:
        await call.message.edit_caption(
            caption=(call.message.caption or "") + "\n\n‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            reply_markup=None,
        )
    except Exception:
        pass

    await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

# ---------- –°–û–ì–õ–ê–°–ò–ï ----------
CONSENT_STATE: Dict[int, Dict[str, bool]] = {}  # user_id -> {plan_code: agreed}

def consent_text(plan_code: str) -> str:
    price = plan_amount(plan_code)
    period = plan_period_days(plan_code)
    base = plan_code.replace("_u18", "")
    title = {
        "m1": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "m3": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "m6": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
    }[base]
    suffix = " ‚Äî —Å–∫–∏–¥–∫–∞ 25%" if plan_code.endswith("_u18") else ""
    return (
        f"üéü <b>{title}{suffix}</b>\n"
        f"–°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\n"
        f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏–π: —Ä–∞–∑ –≤ {period} –¥–Ω–µ–π.\n\n"
        f"{CONSENT_TEXT}\n"
        f"–° —É—Å–ª–æ–≤–∏—è–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Ç—É—Ç: "
        f"<a href='{getattr(settings,'OFFERTA_URL','https://example.com/offer')}'>–û—Ñ–µ—Ä—Ç–∞</a> –∏ "
        f"<a href='{getattr(settings,'PRIVACY_URL','https://example.com/privacy')}'>–ü–æ–ª–∏—Ç–∏–∫–∞</a>."
    )

@router.callback_query(F.data.startswith("consent:toggle:"))
async def consent_toggle(call: CallbackQuery):
    plan = call.data.split(":", 2)[-1]
    uid = call.from_user.id
    CONSENT_STATE.setdefault(uid, {})
    current = CONSENT_STATE[uid].get(plan, False)
    CONSENT_STATE[uid][plan] = not current
    try:
        await call.message.edit_reply_markup(reply_markup=consent_kb(plan, CONSENT_STATE[uid][plan]))
    except Exception:
        pass
    await call.answer()

@router.callback_query(F.data.startswith("consent:confirm:"))
async def consent_confirm(call: CallbackQuery, session: AsyncSession = get_session()):
    plan = call.data.split(":", 2)[-1]
    uid = call.from_user.id
    agreed = CONSENT_STATE.get(uid, {}).get(plan, False)
    if not agreed:
        await call.answer("–ü–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É —Å–æ–≥–ª–∞—Å–∏—è, –∏–Ω–∞—á–µ –Ω–µ —Å–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)
        return

    # –ª–æ–≥ —Å–æ–≥–ª–∞—Å–∏—è (–±–µ–∑ IP/UA)
    await save_consent(
        session,
        user_id=uid,
        plan=plan,
        price_rub=plan_amount(plan),
        period_days=plan_period_days(plan),
    )

    # —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –∏ –≥–µ–Ω–µ—Ä–∏–º —Å—Å—ã–ª–∫—É; —Ñ–ª–∞–≥ Recurring –≤–Ω—É—Ç—Ä–∏ robokassa.py —É—á–∏—Ç—ã–≤–∞–µ—Ç settings.RK_RECURRING_ENABLED
    svc = PaymentService(session)
    payment, invoice_uuid = await svc.create_invoice(tg_user_id=uid, plan=plan)
    try:
        inv_id = int(invoice_uuid[:8], 16)
    except Exception:
        inv_id = abs(hash(invoice_uuid)) % (2**31)

    pay_url = build_payment_link(
        amount_rub=float(plan_amount(plan)),
        inv_id=inv_id,
        user_id=uid,
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan}",
        recurring=True,  # –µ—Å–ª–∏ —Ñ–∏—á–µ—Ñ–ª–∞–≥ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî Recurring –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ URL
    )

    # –∫–∞—Ä—Ç–æ—á–∫–∞ + –∫–Ω–æ–ø–∫–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ù–∞–∑–∞–¥¬ª
    text = card_text_u18(plan) if plan.endswith("_u18") else (
        f"üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan}</b>\n–¶–µ–Ω–∞: {plan_amount(plan)} ‚ÇΩ{POLICY_HTML}"
    )
    await call.message.answer(text, reply_markup=pay_kb(pay_url))
    await call.answer()

# ---------- U18 –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤ ----------
@router.callback_query(F.data.startswith("u18:tariff:"))
async def u18_tariff_consent(call: CallbackQuery):
    plan_code = call.data.split(":", 2)[-1]  # m1_u18|m3_u18|m6_u18
    uid = call.from_user.id
    if uid not in VERIFIED_USERS:
        await call.answer("–ù–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–∞–∂–º–∏ ¬´–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç¬ª –∏ –ø—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.", show_alert=True)
        return
    CONSENT_STATE.setdefault(uid, {})[plan_code] = False
    await call.message.answer(consent_text(plan_code), reply_markup=consent_kb(plan_code, False))
    await call.answer()
