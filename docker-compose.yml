version: "3.9"

services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
      TZ: Europe/Moscow
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    command: ["redis-server", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  app-web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env.app-web
    environment:
      RUN_TARGET: web
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8080/health', timeout=3).status==200 else 1)\""
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  app-bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env.app-bot
    environment:
      RUN_TARGET: bot
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app-web:
        condition: service_started
    # Боту healthcheck необязателен; если очень надо — включи ниже:
    # healthcheck:
    #   test: ["CMD-SHELL", "python -c 'import sys; import importlib; sys.exit(0 if importlib.util.find_spec(\"aiogram\") else 1)'"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 5

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      app-web:
        condition: service_started

volumes:
  db_data:
